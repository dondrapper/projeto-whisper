"""
M√≥dulo para grava√ß√£o de √°udio ao vivo na aplica√ß√£o Whisper.
"""

import streamlit as st
import numpy as np
import tempfile
import wave
import os
from datetime import datetime, timedelta
import time

def show_audio_recorder(model_size, language, task):
    """
    Exibe a interface de grava√ß√£o de √°udio ao vivo.
    
    Args:
        model_size (str): Tamanho do modelo Whisper
        language (str): Idioma selecionado
        task (str): Tarefa (transcribe/translate)
    """
    st.markdown("### üé§ Grava√ß√£o de √Åudio ao Vivo")
    
    # Informa√ß√µes sobre grava√ß√£o
    st.info("""
    **Como usar a grava√ß√£o ao vivo:**
    
    1. **Clique em "Iniciar Grava√ß√£o"** para come√ßar a capturar √°udio
    2. **Fale claramente** pr√≥ximo ao microfone
    3. **Clique em "Parar Grava√ß√£o"** quando terminar
    4. **Aguarde** o processamento autom√°tico da transcri√ß√£o
    
    ‚ö†Ô∏è **Requisitos:**
    - Microfone conectado e funcionando
    - Permiss√£o para acessar o microfone no navegador
    - Ambiente com pouco ru√≠do de fundo (recomendado)
    """)
    
    # Configura√ß√µes de grava√ß√£o
    st.markdown("#### ‚öôÔ∏è Configura√ß√µes de Grava√ß√£o")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        recording_quality = st.selectbox(
            "Qualidade do √°udio:",
            ["standard", "high", "low"],
            format_func=lambda x: {
                "low": "Baixa (8kHz, mono)",
                "standard": "Padr√£o (16kHz, mono)", 
                "high": "Alta (44.1kHz, est√©reo)"
            }[x]
        )
    
    with col2:
        max_duration = st.selectbox(
            "Dura√ß√£o m√°xima:",
            [30, 60, 120, 300, 600],
            index=2,
            format_func=lambda x: f"{x//60}min {x%60}s" if x >= 60 else f"{x}s"
        )
    
    with col3:
        auto_stop_silence = st.checkbox(
            "Parar em sil√™ncio",
            value=True,
            help="Para automaticamente ap√≥s 3 segundos de sil√™ncio"
        )
    
    # Estado da grava√ß√£o
    if 'recording_state' not in st.session_state:
        st.session_state.recording_state = {
            'is_recording': False,
            'start_time': None,
            'audio_data': None,
            'recorded_file': None
        }
    
    # Interface de controle
    st.markdown("#### üéôÔ∏è Controles de Grava√ß√£o")
    
    # Status da grava√ß√£o
    status_container = st.container()
    
    if st.session_state.recording_state['is_recording']:
        with status_container:
            st.success("üî¥ **GRAVANDO...** üî¥")
            
            # Mostrar tempo decorrido
            if st.session_state.recording_state['start_time']:
                elapsed = time.time() - st.session_state.recording_state['start_time']
                remaining = max_duration - elapsed
                
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("‚è±Ô∏è Tempo decorrido", f"{int(elapsed)}s")
                with col2:
                    st.metric("‚è≥ Tempo restante", f"{int(remaining)}s")
                
                # Barra de progresso
                progress = min(elapsed / max_duration, 1.0)
                st.progress(progress)
                
                # Auto-stop se exceder dura√ß√£o m√°xima
                if elapsed >= max_duration:
                    st.session_state.recording_state['is_recording'] = False
                    st.warning(f"‚è∞ Grava√ß√£o parada automaticamente ap√≥s {max_duration} segundos")
                    st.rerun()
    
    # Bot√µes de controle
    button_col1, button_col2, button_col3 = st.columns(3)
    
    with button_col1:
        if not st.session_state.recording_state['is_recording']:
            if st.button("üé§ Iniciar Grava√ß√£o", use_container_width=True, type="primary"):
                start_recording(recording_quality, max_duration)
        else:
            if st.button("‚èπÔ∏è Parar Grava√ß√£o", use_container_width=True, type="secondary"):
                stop_recording()
    
    with button_col2:
        if st.session_state.recording_state['recorded_file'] and not st.session_state.recording_state['is_recording']:
            if st.button("üîÑ Nova Grava√ß√£o", use_container_width=True):
                reset_recording()
    
    with button_col3:
        if st.session_state.recording_state['recorded_file']:
            if st.button("üöÄ Transcrever", use_container_width=True, type="primary"):
                process_recorded_audio(model_size, language, task)
    
    # Mostrar grava√ß√£o atual se existir
    if st.session_state.recording_state['recorded_file'] and not st.session_state.recording_state['is_recording']:
        st.markdown("#### üìª Grava√ß√£o Atual")
        
        # Player de √°udio
        with open(st.session_state.recording_state['recorded_file'], 'rb') as audio_file:
            audio_bytes = audio_file.read()
            st.audio(audio_bytes, format='audio/wav')
        
        # Informa√ß√µes do arquivo
        file_size = os.path.getsize(st.session_state.recording_state['recorded_file'])
        file_size_mb = file_size / (1024 * 1024)
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("üìè Tamanho", f"{file_size_mb:.2f} MB")
        with col2:
            duration = get_audio_duration(st.session_state.recording_state['recorded_file'])
            st.metric("‚è±Ô∏è Dura√ß√£o", f"{duration:.1f}s")

def start_recording(quality, max_duration):
    """
    Inicia a grava√ß√£o de √°udio.
    
    Args:
        quality (str): Qualidade da grava√ß√£o
        max_duration (int): Dura√ß√£o m√°xima em segundos
    """
    try:
        # Configura√ß√µes de √°udio baseadas na qualidade
        audio_config = get_audio_config(quality)
        
        # Atualizar estado
        st.session_state.recording_state.update({
            'is_recording': True,
            'start_time': time.time(),
            'audio_config': audio_config,
            'max_duration': max_duration
        })
        
        st.success("üé§ Grava√ß√£o iniciada!")
        st.rerun()
        
    except Exception as e:
        st.error(f"‚ùå Erro ao iniciar grava√ß√£o: {str(e)}")

def stop_recording():
    """
    Para a grava√ß√£o e salva o arquivo de √°udio.
    """
    try:
        if not st.session_state.recording_state['is_recording']:
            return
        
        # Simular grava√ß√£o (em um ambiente real, aqui capturaria √°udio do microfone)
        # Por limita√ß√µes do Streamlit, criamos um arquivo de exemplo
        audio_file = create_sample_audio_file()
        
        # Atualizar estado
        st.session_state.recording_state.update({
            'is_recording': False,
            'recorded_file': audio_file,
            'end_time': time.time()
        })
        
        st.success("‚úÖ Grava√ß√£o finalizada!")
        st.rerun()
        
    except Exception as e:
        st.error(f"‚ùå Erro ao parar grava√ß√£o: {str(e)}")

def reset_recording():
    """
    Reseta a grava√ß√£o, limpando arquivos tempor√°rios.
    """
    try:
        # Limpar arquivo anterior se existir
        if st.session_state.recording_state.get('recorded_file'):
            file_path = st.session_state.recording_state['recorded_file']
            if os.path.exists(file_path):
                os.unlink(file_path)
        
        # Resetar estado
        st.session_state.recording_state = {
            'is_recording': False,
            'start_time': None,
            'audio_data': None,
            'recorded_file': None
        }
        
        st.info("üîÑ Pronto para nova grava√ß√£o")
        st.rerun()
        
    except Exception as e:
        st.error(f"‚ùå Erro ao resetar grava√ß√£o: {str(e)}")

def process_recorded_audio(model_size, language, task):
    """
    Processa o √°udio gravado usando o Whisper.
    
    Args:
        model_size (str): Tamanho do modelo
        language (str): Idioma selecionado
        task (str): Tarefa de transcri√ß√£o
    """
    try:
        recorded_file = st.session_state.recording_state.get('recorded_file')
        
        if not recorded_file or not os.path.exists(recorded_file):
            st.error("‚ùå Nenhuma grava√ß√£o encontrada")
            return
        
        # Importar aqui para evitar depend√™ncias circulares
        from transcriber import load_whisper_model, transcribe_audio
        
        # Mostrar progresso
        with st.spinner("üîÑ Processando grava√ß√£o..."):
            progress_bar = st.progress(0)
            
            # Carregar modelo
            progress_bar.progress(25)
            model = load_whisper_model(model_size)
            
            # Transcrever
            progress_bar.progress(50)
            result = transcribe_audio(recorded_file, model, language, task)
            
            progress_bar.progress(100)
        
        # Exibir resultados
        st.markdown("### üìù Resultado da Transcri√ß√£o")
        
        # M√©tricas
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("üó£Ô∏è Idioma", result.get('language', 'Desconhecido'))
        with col2:
            st.metric("‚è±Ô∏è Processamento", result.get('processing_time_formatted', 'N/A'))
        with col3:
            st.metric("üìä Segmentos", len(result.get('segments', [])))
        
        # Texto transcrito
        st.text_area("Transcri√ß√£o:", result.get('text', ''), height=200)
        
        # Downloads
        if result.get('text'):
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            
            col1, col2 = st.columns(2)
            with col1:
                st.download_button(
                    "üìÑ Baixar TXT",
                    result['text'],
                    file_name=f"gravacao_{timestamp}.txt",
                    mime="text/plain"
                )
            
            with col2:
                # Gerar SRT se houver segmentos
                if result.get('segments'):
                    srt_content = generate_srt_from_segments(result['segments'])
                    st.download_button(
                        "üé¨ Baixar SRT", 
                        srt_content,
                        file_name=f"gravacao_{timestamp}.srt",
                        mime="text/plain"
                    )
        
        st.success("‚úÖ Transcri√ß√£o da grava√ß√£o conclu√≠da!")
        
    except Exception as e:
        st.error(f"‚ùå Erro ao processar grava√ß√£o: {str(e)}")

def get_audio_config(quality):
    """
    Retorna configura√ß√µes de √°udio baseadas na qualidade selecionada.
    
    Args:
        quality (str): Qualidade selecionada
        
    Returns:
        dict: Configura√ß√µes de √°udio
    """
    configs = {
        "low": {
            "sample_rate": 8000,
            "channels": 1,
            "bit_depth": 16
        },
        "standard": {
            "sample_rate": 16000,
            "channels": 1,
            "bit_depth": 16
        },
        "high": {
            "sample_rate": 44100,
            "channels": 2,
            "bit_depth": 16
        }
    }
    
    return configs.get(quality, configs["standard"])

def create_sample_audio_file():
    """
    Cria um arquivo de √°udio de exemplo (para demonstra√ß√£o).
    Em um ambiente real, este seria substitu√≠do pela captura real do microfone.
    
    Returns:
        str: Caminho para o arquivo de √°udio criado
    """
    try:
        # Gerar alguns segundos de √°udio de exemplo (tom)
        sample_rate = 16000
        duration = 3  # 3 segundos
        frequency = 440  # L√° 4 (440 Hz)
        
        # Gerar onda senoidal
        t = np.linspace(0, duration, int(sample_rate * duration), False)
        wave_data = np.sin(2 * np.pi * frequency * t) * 0.3
        
        # Converter para int16
        audio_data = (wave_data * 32767).astype(np.int16)
        
        # Criar arquivo tempor√°rio
        temp_file = tempfile.NamedTemporaryFile(
            delete=False, 
            suffix=".wav",
            prefix="recorded_audio_"
        )
        
        # Salvar como WAV
        with wave.open(temp_file.name, 'wb') as wav_file:
            wav_file.setnchannels(1)  # Mono
            wav_file.setsampwidth(2)  # 16-bit
            wav_file.setframerate(sample_rate)
            wav_file.writeframes(audio_data.tobytes())
        
        return temp_file.name
        
    except Exception as e:
        raise Exception(f"Erro ao criar arquivo de √°udio: {str(e)}")

def get_audio_duration(file_path):
    """
    Obt√©m a dura√ß√£o de um arquivo de √°udio WAV.
    
    Args:
        file_path (str): Caminho para o arquivo
        
    Returns:
        float: Dura√ß√£o em segundos
    """
    try:
        with wave.open(file_path, 'rb') as wav_file:
            frames = wav_file.getnframes()
            sample_rate = wav_file.getframerate()
            duration = frames / float(sample_rate)
            return duration
    except Exception:
        return 0.0

def generate_srt_from_segments(segments):
    """
    Gera conte√∫do SRT a partir dos segmentos de transcri√ß√£o.
    
    Args:
        segments (list): Lista de segmentos do Whisper
        
    Returns:
        str: Conte√∫do formatado em SRT
    """
    srt_content = ""
    
    for i, segment in enumerate(segments, 1):
        start_time = format_time_for_srt(segment.get('start', 0))
        end_time = format_time_for_srt(segment.get('end', 0))
        text = segment.get('text', '').strip()
        
        srt_content += f"{i}\n"
        srt_content += f"{start_time} --> {end_time}\n"
        srt_content += f"{text}\n\n"
    
    return srt_content

def format_time_for_srt(seconds):
    """
    Formata tempo em segundos para o formato SRT (HH:MM:SS,mmm).
    
    Args:
        seconds (float): Tempo em segundos
        
    Returns:
        str: Tempo formatado para SRT
    """
    hours = int(seconds // 3600)
    minutes = int((seconds % 3600) // 60)
    secs = int(seconds % 60)
    milliseconds = int((seconds % 1) * 1000)
    
    return f"{hours:02d}:{minutes:02d}:{secs:02d},{milliseconds:03d}"

def record_audio():
    """
    Fun√ß√£o principal para grava√ß√£o de √°udio (placeholder).
    Em um ambiente real, esta fun√ß√£o utilizaria bibliotecas como pyaudio
    para capturar √°udio do microfone em tempo real.
    """
    st.warning("""
    ‚ö†Ô∏è **Funcionalidade de Grava√ß√£o em Desenvolvimento**
    
    A grava√ß√£o de √°udio ao vivo requer:
    - Bibliotecas adicionais (pyaudio, sounddevice)
    - Configura√ß√£o de permiss√µes do navegador
    - Interface JavaScript personalizada
    
    Por enquanto, esta funcionalidade simula a grava√ß√£o com um arquivo de exemplo.
    Para implementa√ß√£o completa, considere usar:
    - streamlit-webrtc para captura de √°udio em tempo real
    - streamlit-audio-recorder como alternativa
    """)

# Instru√ß√µes de instala√ß√£o para grava√ß√£o real
RECORDING_INSTRUCTIONS = """
## Para habilitar grava√ß√£o real de √°udio:

### 1. Instalar depend√™ncias adicionais:
```bash
pip install pyaudio sounddevice streamlit-webrtc
```

### 2. Configurar permiss√µes HTTPS:
A grava√ß√£o de √°udio requer HTTPS no navegador.

### 3. Alternativas recomendadas:
- **streamlit-audio-recorder**: Componente simples para grava√ß√£o
- **streamlit-webrtc**: Solu√ß√£o completa para WebRTC
- **streamlit-javascript**: Para implementa√ß√µes personalizadas

### 4. Exemplo de uso com streamlit-audio-recorder:
```python
from streamlit_audio_recorder import audio_recorder

audio_bytes = audio_recorder()
if audio_bytes:
    st.audio(audio_bytes, format="audio/wav")
```
"""